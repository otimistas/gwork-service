// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO m_users (
  login_id,
  password,
  name,
  created_by,
  from_system,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, NOW(), NOW()
) RETURNING id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at
`

type CreateUserParams struct {
	LoginID    string      `json:"login_id"`
	Password   string      `json:"password"`
	Name       string      `json:"name"`
	CreatedBy  pgtype.UUID `json:"created_by"`
	FromSystem bool        `json:"from_system"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (MUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.LoginID,
		arg.Password,
		arg.Name,
		arg.CreatedBy,
		arg.FromSystem,
	)
	var i MUser
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Password,
		&i.Name,
		&i.LastLoggedInAt,
		&i.CreatedBy,
		&i.FromSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM m_users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const findUser = `-- name: FindUser :one
SELECT id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at FROM m_users
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id uuid.UUID) (MUser, error) {
	row := q.db.QueryRow(ctx, findUser, id)
	var i MUser
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Password,
		&i.Name,
		&i.LastLoggedInAt,
		&i.CreatedBy,
		&i.FromSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserForLogin = `-- name: FindUserForLogin :one
SELECT id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at FROM m_users
WHERE login_id = $1 LIMIT 1
`

func (q *Queries) FindUserForLogin(ctx context.Context, loginID string) (MUser, error) {
	row := q.db.QueryRow(ctx, findUserForLogin, loginID)
	var i MUser
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Password,
		&i.Name,
		&i.LastLoggedInAt,
		&i.CreatedBy,
		&i.FromSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at FROM m_users
ORDER BY last_logged_in_at DESC, created_at ASC
`

func (q *Queries) GetUsers(ctx context.Context) ([]MUser, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MUser{}
	for rows.Next() {
		var i MUser
		if err := rows.Scan(
			&i.ID,
			&i.LoginID,
			&i.Password,
			&i.Name,
			&i.LastLoggedInAt,
			&i.CreatedBy,
			&i.FromSystem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersFromName = `-- name: GetUsersFromName :many
SELECT id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at FROM m_users
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name DESC, created_at ASC
`

func (q *Queries) GetUsersFromName(ctx context.Context, dollar_1 pgtype.Text) ([]MUser, error) {
	rows, err := q.db.Query(ctx, getUsersFromName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MUser{}
	for rows.Next() {
		var i MUser
		if err := rows.Scan(
			&i.ID,
			&i.LoginID,
			&i.Password,
			&i.Name,
			&i.LastLoggedInAt,
			&i.CreatedBy,
			&i.FromSystem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserLoggedAt = `-- name: UpdateUserLoggedAt :one
UPDATE m_users
SET last_logged_in_at = NOW(), updated_at = NOW()
WHERE id = $1
RETURNING id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at
`

func (q *Queries) UpdateUserLoggedAt(ctx context.Context, id uuid.UUID) (MUser, error) {
	row := q.db.QueryRow(ctx, updateUserLoggedAt, id)
	var i MUser
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Password,
		&i.Name,
		&i.LastLoggedInAt,
		&i.CreatedBy,
		&i.FromSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE m_users
SET name = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at
`

type UpdateUserNameParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (MUser, error) {
	row := q.db.QueryRow(ctx, updateUserName, arg.ID, arg.Name)
	var i MUser
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Password,
		&i.Name,
		&i.LastLoggedInAt,
		&i.CreatedBy,
		&i.FromSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE m_users
SET password = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, login_id, password, name, last_logged_in_at, created_by, from_system, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID       uuid.UUID `json:"id"`
	Password string    `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (MUser, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.Password)
	var i MUser
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Password,
		&i.Name,
		&i.LastLoggedInAt,
		&i.CreatedBy,
		&i.FromSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
